{"cells":[{"cell_type":"markdown","metadata":{"id":"u-Gw4MlgZjDs"},"source":["#Data Structures"]},{"cell_type":"markdown","metadata":{"id":"c90m6PucZnIj"},"source":["## Qn: Please write properties of lists, tuples, dictionaries and sets"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1709219318249,"user":{"displayName":"Naga Sai Charani Alampalle","userId":"18257162231661988272"},"user_tz":-330},"id":"slhjV47SZBWm"},"outputs":[],"source":["# Declare empty list, tuple, set\n","\n","mylist = []\n","mytuple = ()\n","myset = {}\n"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1709219318250,"user":{"displayName":"Naga Sai Charani Alampalle","userId":"18257162231661988272"},"user_tz":-330},"id":"nYtygDgZaL2Q"},"outputs":[{"ename":"NameError","evalue":"name 'mylist' is not defined","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[1;32mIn[1], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# append elements (1,4,3,6,7,7) to the list, tuple and set that u declared\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m \u001b[43mmylist\u001b[49m\u001b[38;5;241m.\u001b[39mappend(\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m4\u001b[39m,\u001b[38;5;241m3\u001b[39m,\u001b[38;5;241m6\u001b[39m,\u001b[38;5;241m7\u001b[39m,\u001b[38;5;241m7\u001b[39m)\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28mprint\u001b[39m(mylist)\n","\u001b[1;31mNameError\u001b[0m: name 'mylist' is not defined"]}],"source":["# append elements (1,4,3,6,7,7) to the list, tuple and set that u declared\n","\n","mylist.append(1,4,3,6,7,7)\n","print(mylist)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"La6ZcGucaeaV"},"outputs":[],"source":["# print the list, tuple and set\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gR7yadWMaxE6"},"outputs":[],"source":["## fetch alternate elements of list\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ami4M9Kma0pR"},"outputs":[],"source":["list1  = [1,2,1,2,1]\n","\n","#check whether list1 is palidrome or not (palidrome mean : reversing the list should be equal to the original list)\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q2PNMRRIa-uS"},"outputs":[],"source":["#Declare a dictionary and add a student subject wise marks\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jN8EZZ3KbPXT"},"outputs":[],"source":["states = [\"Andhra\", \"karnataka\", \"telangana\"]\n","capitals = [\"Amaravathi\", \"Bangalore\", \"Hyderabad\"]\n","\n","#Convert the above lists to dictionary with states being key and capitals as values\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-yITAxv2bskK"},"outputs":[],"source":["## Add few other states and captials to the above dictionary\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hLVMNKAccAV5"},"outputs":[],"source":["## declare a list with elements < 3, 4, 'happy', 6.7, True, [2, 6, 7], (4 , 5.9), {\"status\": \"happy\", \"marks:\"85} >\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mR83AhnrcAS9"},"outputs":[],"source":["## Perform all the list operations on the above list\n","## remove\n","\n","## pop\n","\n","## append\n","\n","## insert\n","\n","## slicing (fetch last 2 elements and fetch only odd index elements)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S0D35cKBeKOR"},"outputs":[],"source":["list_2 = [2,3,4,\"happy\",88]\n","\n","## check whether \"sad\" is present in list_2\n","\n","## if \"sad\" is not present in list_2, please add it to the list\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iAPrJbrseKLa"},"outputs":[],"source":["## do the above task using generalized function\n","## given ay word as input, and the list, write a function to check if word is present in list, if not present we should add it to list and return new list\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2pzltUADeKIr"},"outputs":[],"source":["list_3 = [9,4,2,7,1,8]\n","\n","## sort the list_3\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BIgKWrgseKF2"},"outputs":[],"source":["mytuple_1 = (4,2,3,6)\n","\n","##retrive 2nd element from mytuple_1\n","\n","##convert mytuple_1 to list and append elemts 10\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MNOSHZgReKCi"},"outputs":[],"source":["## Declare dictonary using diffrent ways and use all the different dictionary functions\n","\n","\n","\n"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":11,"status":"ok","timestamp":1709222187591,"user":{"displayName":"Naga Sai Charani Alampalle","userId":"18257162231661988272"},"user_tz":-330},"id":"7pFlYnQSeJ_a"},"outputs":[],"source":["categories = {\"animal\": \"Dog\",\"Human\":\"Male\"}\n","\n","data = [{\"Breed\": \"german shephard\" , \"age\": 10, \"category\": \"animal\"},\n","        {\"Breed\": \"bull dog\" , \"age\": 12, \"category\": \"animal\"},\n","        {\"Breed\": \"golden retriever\" , \"age\": 8, \"category\": \"animal\"},\n","        {\"state\": \"MP\" , \"age\": 20, \"category\": \"Human\"},\n","        {\"state\": \"Gujarat\" , \"age\": 82, \"category\": \"Human\"},\n","        {\"state\": \"MP\" , \"age\": 38, \"category\": \"Human\"},]\n","\n","## make dictionary having keys as categories and values as data\n","\n","\n","\n","\n","## get the details of bull dog\n","\n","\n","## what is the category of golden retriever\n","\n","\n","## How many Humans are from MP state\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-m8tC52IeJ8T"},"outputs":[],"source":[]}],"metadata":{"colab":{"authorship_tag":"ABX9TyOHBsprstahp8wR8tJ2ZjAJ","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.6"}},"nbformat":4,"nbformat_minor":0}
